Module 8. Organizing Network Device Operations into Modules and Packages

o Modules overview

   A module is the highest-level program organization unit that
   contains program code and data intended for reuse.
   A module is a Python object with arbitrarily named attributes
   that you can bind and reference.
   A module is a file containing Python definitions and statements.
   The file name is the module name with the suffix .py appended.
   Within a module, the module’s name (as a string) is available as
   the value of the global variable __name__.
   A module can contain executable statements as well as function definitions.
   These statements are intended to initialize the module. They are executed
   only the first time the module name is encountered in an import statement.
   (They are also run if the file is executed as a script.)
   
   When a module named spam is imported, the interpreter first searches
   for a built-in module with that name. If not found, it then searches
   for a file named spam.py in a list of directories given by the
   variable sys.path.
   sys.path is initialized from these locations:
   - the directory containing the input script (or the current directory).
   - PYTHONPATH (a list of directory names, with the same syntax as the
     shell variable PATH).
   - the installation-dependent default.
   
   Modules have at least three roles:
   - Code reuse
     modules are a place to define names, known as attributes,
     which may be referenced by other external modules.
   
  - System namespace partitioning
    Each module has its own private symbol table, which is used
    as the global symbol table by all functions defined in the module.
    Thus, the author of a module can use global variables in the module
    without worrying about accidental clashes with a user’s global variables.
    
  - Implementing shared services or data
    Modules can import other modules.
    The imported module names are placed in the importing
    module’s global symbol table.
    
    In simple terms, modules are just namespaces (places where names
    are created), and the names that live in a module are called its
    attributes.
    
    
    
o Packages overview

   A package is a collection of Python modules.
   A directory of Python code is said to be a package.


o Organizing a large project

   The import operation and modules are at the heart of program
   architecture in Python. Larger programs are divided into multiple
   files (modules), which are linked together at runtime by imports.
   Imports in turn use the module search path to locate files, and
   modules define attributes for external use.
   
   
   
   